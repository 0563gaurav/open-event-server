{
  "basePath": "/api/v2", 
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "Event": {
      "properties": {
        "background_image": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "call_for_papers": {
          "$ref": "#/definitions/EventCFS"
        }, 
        "code_of_conduct": {
          "type": "string"
        }, 
        "copyright": {
          "$ref": "#/definitions/EventCopyright"
        }, 
        "creator": {
          "$ref": "#/definitions/EventCreator"
        }, 
        "description": {
          "type": "string"
        }, 
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "end_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "event_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "identifier": {
          "type": "string"
        }, 
        "latitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "location_name": {
          "type": "string"
        }, 
        "logo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "longitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }, 
        "organizer_description": {
          "type": "string"
        }, 
        "organizer_name": {
          "type": "string"
        }, 
        "privacy": {
          "example": "public", 
          "type": "string"
        }, 
        "schedule_published_on": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "searchable_location_name": {
          "type": "string"
        }, 
        "social_links": {
          "items": {
            "$ref": "#/definitions/SocialLink"
          }, 
          "type": "array"
        }, 
        "start_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "default": "Draft", 
          "example": "Draft", 
          "type": "string"
        }, 
        "sub_topic": {
          "example": "Air", 
          "type": "string"
        }, 
        "ticket_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "timezone": {
          "type": "string"
        }, 
        "topic": {
          "example": "Auto, Boat & Air", 
          "type": "string"
        }, 
        "type": {
          "example": "Appearance or Signing", 
          "type": "string"
        }, 
        "version": {
          "$ref": "#/definitions/EventVersion"
        }
      }, 
      "required": [
        "end_time", 
        "id", 
        "name", 
        "start_time"
      ], 
      "type": "object"
    }, 
    "EventCFS": {
      "properties": {
        "announcement": {
          "type": "string"
        }, 
        "end_date": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "privacy": {
          "example": "public", 
          "type": "string"
        }, 
        "start_date": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "timezone": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "EventComplete": {
      "properties": {
        "background_image": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "call_for_papers": {
          "$ref": "#/definitions/EventCFS"
        }, 
        "code_of_conduct": {
          "type": "string"
        }, 
        "copyright": {
          "$ref": "#/definitions/EventCopyright"
        }, 
        "creator": {
          "$ref": "#/definitions/EventCreator"
        }, 
        "description": {
          "type": "string"
        }, 
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "end_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "event_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "identifier": {
          "type": "string"
        }, 
        "latitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "location_name": {
          "type": "string"
        }, 
        "logo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "longitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "microlocations": {
          "items": {
            "$ref": "#/definitions/Microlocation"
          }, 
          "type": "array"
        }, 
        "name": {
          "type": "string"
        }, 
        "organizer_description": {
          "type": "string"
        }, 
        "organizer_name": {
          "type": "string"
        }, 
        "privacy": {
          "example": "public", 
          "type": "string"
        }, 
        "schedule_published_on": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "searchable_location_name": {
          "type": "string"
        }, 
        "sessions": {
          "items": {
            "$ref": "#/definitions/Session"
          }, 
          "type": "array"
        }, 
        "social_links": {
          "items": {
            "$ref": "#/definitions/SocialLink"
          }, 
          "type": "array"
        }, 
        "speakers": {
          "items": {
            "$ref": "#/definitions/Speaker"
          }, 
          "type": "array"
        }, 
        "sponsors": {
          "items": {
            "$ref": "#/definitions/Sponsor"
          }, 
          "type": "array"
        }, 
        "start_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "default": "Draft", 
          "example": "Draft", 
          "type": "string"
        }, 
        "sub_topic": {
          "example": "Air", 
          "type": "string"
        }, 
        "ticket_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "timezone": {
          "type": "string"
        }, 
        "topic": {
          "example": "Auto, Boat & Air", 
          "type": "string"
        }, 
        "tracks": {
          "items": {
            "$ref": "#/definitions/Track"
          }, 
          "type": "array"
        }, 
        "type": {
          "example": "Appearance or Signing", 
          "type": "string"
        }, 
        "version": {
          "$ref": "#/definitions/EventVersion"
        }
      }, 
      "required": [
        "end_time", 
        "id", 
        "name", 
        "start_time"
      ], 
      "type": "object"
    }, 
    "EventCopyright": {
      "properties": {
        "holder": {
          "type": "string"
        }, 
        "holder_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "licence": {
          "type": "string"
        }, 
        "licence_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "logo": {
          "type": "string"
        }, 
        "year": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "EventCreator": {
      "properties": {
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "EventPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Event"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "EventPost": {
      "properties": {
        "background_image": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "call_for_papers": {
          "$ref": "#/definitions/EventCFS"
        }, 
        "code_of_conduct": {
          "type": "string"
        }, 
        "copyright": {
          "$ref": "#/definitions/EventCopyright"
        }, 
        "description": {
          "type": "string"
        }, 
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "end_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "event_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "identifier": {
          "type": "string"
        }, 
        "latitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "location_name": {
          "type": "string"
        }, 
        "logo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "longitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }, 
        "organizer_description": {
          "type": "string"
        }, 
        "organizer_name": {
          "type": "string"
        }, 
        "privacy": {
          "example": "public", 
          "type": "string"
        }, 
        "schedule_published_on": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "searchable_location_name": {
          "type": "string"
        }, 
        "start_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "default": "Draft", 
          "example": "Draft", 
          "type": "string"
        }, 
        "sub_topic": {
          "example": "Air", 
          "type": "string"
        }, 
        "ticket_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "timezone": {
          "type": "string"
        }, 
        "topic": {
          "example": "Auto, Boat & Air", 
          "type": "string"
        }, 
        "type": {
          "example": "Appearance or Signing", 
          "type": "string"
        }
      }, 
      "required": [
        "end_time", 
        "name", 
        "start_time"
      ], 
      "type": "object"
    }, 
    "EventVersion": {
      "properties": {
        "event_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "microlocations_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "sessions_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "speakers_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "sponsors_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "tracks_ver": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "InvalidServiceError": {
      "properties": {
        "code": {
          "example": 400, 
          "type": "integer"
        }, 
        "field": {
          "type": "string"
        }, 
        "message": {
          "type": "string"
        }, 
        "status": {
          "example": "INVALID_SERVICE", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Login": {
      "properties": {
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "password": {
          "type": "string"
        }
      }, 
      "required": [
        "email", 
        "password"
      ], 
      "type": "object"
    }, 
    "Microlocation": {
      "properties": {
        "floor": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "latitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "longitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }, 
        "room": {
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "MicrolocationPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Microlocation"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "MicrolocationPost": {
      "properties": {
        "floor": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "latitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "longitude": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }, 
        "room": {
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "NotAuthorizedError": {
      "properties": {
        "code": {
          "example": 401, 
          "type": "integer"
        }, 
        "field": {
          "type": "string"
        }, 
        "message": {
          "type": "string"
        }, 
        "status": {
          "example": "NOT_AUTHORIZED", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "NotFoundError": {
      "properties": {
        "code": {
          "example": 404, 
          "type": "integer"
        }, 
        "field": {
          "type": "string"
        }, 
        "message": {
          "type": "string"
        }, 
        "status": {
          "example": "NOT_FOUND", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Notification": {
      "properties": {
        "action": {
          "type": "string"
        }, 
        "email": {
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "message": {
          "type": "string"
        }, 
        "received_at": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "title": {
          "type": "string"
        }
      }, 
      "required": [
        "email", 
        "id"
      ], 
      "type": "object"
    }, 
    "NotificationPost": {
      "properties": {
        "action": {
          "type": "string"
        }, 
        "email": {
          "type": "string"
        }, 
        "message": {
          "type": "string"
        }, 
        "received_at": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "title": {
          "type": "string"
        }
      }, 
      "required": [
        "email"
      ], 
      "type": "object"
    }, 
    "Session": {
      "properties": {
        "audio": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "comments": {
          "type": "string"
        }, 
        "end_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "language": {
          "example": "German", 
          "type": "string"
        }, 
        "long_abstract": {
          "type": "string"
        }, 
        "microlocation": {
          "$ref": "#/definitions/SessionMicrolocation"
        }, 
        "session_type": {
          "$ref": "#/definitions/SessionType"
        }, 
        "short_abstract": {
          "type": "string"
        }, 
        "signup_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "slides": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "speakers": {
          "items": {
            "$ref": "#/definitions/SessionSpeaker"
          }, 
          "type": "array"
        }, 
        "start_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "example": "pending", 
          "type": "string"
        }, 
        "subtitle": {
          "type": "string"
        }, 
        "title": {
          "type": "string"
        }, 
        "track": {
          "$ref": "#/definitions/SessionTrack"
        }, 
        "video": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "end_time", 
        "id", 
        "start_time", 
        "title"
      ], 
      "type": "object"
    }, 
    "SessionMicrolocation": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "id"
      ], 
      "type": "object"
    }, 
    "SessionPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Session"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "SessionPost": {
      "properties": {
        "audio": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "comments": {
          "type": "string"
        }, 
        "end_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "language": {
          "example": "German", 
          "type": "string"
        }, 
        "long_abstract": {
          "type": "string"
        }, 
        "microlocation_id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "session_type_id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "short_abstract": {
          "type": "string"
        }, 
        "signup_url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }, 
        "slides": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "speaker_ids": {
          "items": {
            "example": 0, 
            "format": "int", 
            "type": "integer"
          }, 
          "type": "array"
        }, 
        "start_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "example": "pending", 
          "type": "string"
        }, 
        "subtitle": {
          "type": "string"
        }, 
        "title": {
          "type": "string"
        }, 
        "track_id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "video": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "end_time", 
        "start_time", 
        "title"
      ], 
      "type": "object"
    }, 
    "SessionSpeaker": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }, 
        "organisation": {
          "type": "string"
        }
      }, 
      "required": [
        "id"
      ], 
      "type": "object"
    }, 
    "SessionTrack": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "id"
      ], 
      "type": "object"
    }, 
    "SessionType": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "length": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "length", 
        "name"
      ], 
      "type": "object"
    }, 
    "SessionTypePost": {
      "properties": {
        "length": {
          "example": 0.0, 
          "format": "float", 
          "type": "number"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "length", 
        "name"
      ], 
      "type": "object"
    }, 
    "SocialLink": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "link": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "link", 
        "name"
      ], 
      "type": "object"
    }, 
    "SocialLinkPost": {
      "properties": {
        "link": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "required": [
        "link", 
        "name"
      ], 
      "type": "object"
    }, 
    "Speaker": {
      "properties": {
        "country": {
          "type": "string"
        }, 
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "facebook": {
          "type": "string"
        }, 
        "featured": {
          "type": "boolean"
        }, 
        "github": {
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "linkedin": {
          "type": "string"
        }, 
        "long_biography": {
          "type": "string"
        }, 
        "mobile": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "organisation": {
          "type": "string"
        }, 
        "photo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "position": {
          "type": "string"
        }, 
        "sessions": {
          "items": {
            "$ref": "#/definitions/SpeakerSession"
          }, 
          "type": "array"
        }, 
        "short_biography": {
          "type": "string"
        }, 
        "twitter": {
          "type": "string"
        }, 
        "website": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "country", 
        "email", 
        "id", 
        "name", 
        "organisation"
      ], 
      "type": "object"
    }, 
    "SpeakerPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Speaker"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "SpeakerPost": {
      "properties": {
        "country": {
          "type": "string"
        }, 
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "facebook": {
          "type": "string"
        }, 
        "featured": {
          "type": "boolean"
        }, 
        "github": {
          "type": "string"
        }, 
        "linkedin": {
          "type": "string"
        }, 
        "long_biography": {
          "type": "string"
        }, 
        "mobile": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "organisation": {
          "type": "string"
        }, 
        "photo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "position": {
          "type": "string"
        }, 
        "short_biography": {
          "type": "string"
        }, 
        "twitter": {
          "type": "string"
        }, 
        "website": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "country", 
        "email", 
        "name", 
        "organisation"
      ], 
      "type": "object"
    }, 
    "SpeakerSession": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "title": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Sponsor": {
      "properties": {
        "description": {
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "level": {
          "type": "string"
        }, 
        "logo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "sponsor_type": {
          "type": "string"
        }, 
        "url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "SponsorPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Sponsor"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "SponsorPost": {
      "properties": {
        "description": {
          "type": "string"
        }, 
        "level": {
          "type": "string"
        }, 
        "logo": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "sponsor_type": {
          "type": "string"
        }, 
        "url": {
          "example": "http://website.com", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "Token": {
      "properties": {
        "access_token": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Track": {
      "properties": {
        "color": {
          "example": "green", 
          "format": "color", 
          "type": "string"
        }, 
        "description": {
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "location": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "sessions": {
          "items": {
            "$ref": "#/definitions/TrackSession"
          }, 
          "type": "array"
        }, 
        "track_image_url": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "color", 
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "TrackPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/Track"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "TrackPost": {
      "properties": {
        "color": {
          "example": "green", 
          "format": "color", 
          "type": "string"
        }, 
        "description": {
          "type": "string"
        }, 
        "location": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "track_image_url": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }
      }, 
      "required": [
        "color", 
        "name"
      ], 
      "type": "object"
    }, 
    "TrackSession": {
      "properties": {
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "title": {
          "type": "string"
        }
      }, 
      "required": [
        "id"
      ], 
      "type": "object"
    }, 
    "User": {
      "properties": {
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "id": {
          "example": 0, 
          "format": "int", 
          "type": "integer"
        }, 
        "last_access_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "signup_time": {
          "example": "2016-06-06T11:22:33", 
          "format": "date-time", 
          "type": "string"
        }, 
        "user_detail": {
          "$ref": "#/definitions/UserDetail"
        }
      }, 
      "required": [
        "email"
      ], 
      "type": "object"
    }, 
    "UserDetail": {
      "properties": {
        "avatar": {
          "example": "http://website.com/item.ext", 
          "format": "uri", 
          "type": "string"
        }, 
        "contact": {
          "type": "string"
        }, 
        "details": {
          "type": "string"
        }, 
        "facebook": {
          "type": "string"
        }, 
        "firstname": {
          "type": "string"
        }, 
        "lastname": {
          "type": "string"
        }, 
        "twitter": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "UserPaginated": {
      "properties": {
        "count": {
          "type": "integer"
        }, 
        "limit": {
          "type": "integer"
        }, 
        "next": {
          "type": "string"
        }, 
        "previous": {
          "type": "string"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/User"
          }, 
          "type": "array"
        }, 
        "start": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "UserPost": {
      "properties": {
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "password": {
          "type": "string"
        }
      }, 
      "required": [
        "email", 
        "password"
      ], 
      "type": "object"
    }, 
    "UserPut": {
      "properties": {
        "email": {
          "example": "email@domain.com", 
          "format": "email", 
          "type": "string"
        }, 
        "user_detail": {
          "$ref": "#/definitions/UserDetail"
        }
      }, 
      "required": [
        "email"
      ], 
      "type": "object"
    }, 
    "ValidationError": {
      "properties": {
        "code": {
          "example": 400, 
          "type": "integer"
        }, 
        "field": {
          "type": "string"
        }, 
        "message": {
          "type": "string"
        }, 
        "status": {
          "example": "INVALID_FIELD", 
          "type": "string"
        }
      }, 
      "type": "object"
    }
  }, 
  "host": "localhost", 
  "info": {
    "description": "Open Event Organizer APIs", 
    "title": "Organizer Server APIs", 
    "version": "2.0"
  }, 
  "paths": {
    "/events": {
      "get": {
        "operationId": "get_event_list", 
        "parameters": [
          {
            "in": "query", 
            "name": "end_time_gt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "end_time_lt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "privacy", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_lt", 
            "type": "string"
          }, 
          {
            "description": "Contains the string in name and description", 
            "in": "query", 
            "name": "contains", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "topic", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "state", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "location", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "sub_topic", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_gt", 
            "type": "string"
          }, 
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "time_period", 
            "type": "string"
          }, 
          {
            "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", 
            "in": "query", 
            "name": "include", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "type", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/EventComplete"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all events", 
        "tags": [
          "events"
        ]
      }, 
      "post": {
        "operationId": "post_event_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/EventPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create an event", 
        "tags": [
          "events"
        ]
      }
    }, 
    "/events/page": {
      "get": {
        "operationId": "get_event_list_paginated", 
        "parameters": [
          {
            "in": "query", 
            "name": "end_time_gt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "end_time_lt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "privacy", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_lt", 
            "type": "string"
          }, 
          {
            "description": "Contains the string in name and description", 
            "in": "query", 
            "name": "contains", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "topic", 
            "type": "string"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "in": "query", 
            "name": "state", 
            "type": "string"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "in": "query", 
            "name": "location", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "sub_topic", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_gt", 
            "type": "string"
          }, 
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "time_period", 
            "type": "string"
          }, 
          {
            "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", 
            "in": "query", 
            "name": "include", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "type", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/EventPaginated"
            }
          }
        }, 
        "summary": "List events in a paginated manner", 
        "tags": [
          "events"
        ]
      }
    }, 
    "/events/{event_id}": {
      "delete": {
        "operationId": "delete_event", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }, 
          "404": {
            "description": "Event not found"
          }
        }, 
        "summary": "Delete an event given its id", 
        "tags": [
          "events"
        ]
      }, 
      "get": {
        "operationId": "get_event", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", 
            "in": "query", 
            "name": "include", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/EventComplete"
            }
          }, 
          "404": {
            "description": "Event not found"
          }
        }, 
        "summary": "Fetch an event given its id", 
        "tags": [
          "events"
        ]
      }, 
      "parameters": [
        {
          "description": null, 
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_event", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/EventPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update an event given its id", 
        "tags": [
          "events"
        ]
      }
    }, 
    "/events/{event_id}/event": {
      "get": {
        "description": "Alternate endpoint for fetching an event.", 
        "operationId": "get_event_webapp", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/EventComplete"
            }
          }, 
          "404": {
            "description": "Event not found"
          }
        }, 
        "summary": "Fetch an event given its id", 
        "tags": [
          "events"
        ]
      }, 
      "parameters": [
        {
          "description": null, 
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/links": {
      "get": {
        "operationId": "get_social_link_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/SocialLink"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all social links", 
        "tags": [
          "events"
        ]
      }, 
      "parameters": [
        {
          "description": null, 
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_social_link_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SocialLinkPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SocialLink"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a social link", 
        "tags": [
          "events"
        ]
      }
    }, 
    "/events/{event_id}/links/{link_id}": {
      "delete": {
        "operationId": "delete_social_link", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SocialLink"
            }
          }
        }, 
        "summary": "Delete a social link given its id", 
        "tags": [
          "events"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "link_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_social_link", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SocialLinkPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SocialLink"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a social link given its id", 
        "tags": [
          "events"
        ]
      }
    }, 
    "/events/{event_id}/microlocations": {
      "get": {
        "operationId": "get_microlocation_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Microlocation"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all microlocations", 
        "tags": [
          "microlocations"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_microlocation_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/MicrolocationPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Microlocation"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a microlocation", 
        "tags": [
          "microlocations"
        ]
      }
    }, 
    "/events/{event_id}/microlocations/page": {
      "get": {
        "operationId": "get_microlocation_list_paginated", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MicrolocationPaginated"
            }
          }
        }, 
        "summary": "List microlocations in a paginated manner", 
        "tags": [
          "microlocations"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/microlocations/{microlocation_id}": {
      "delete": {
        "operationId": "delete_microlocation", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Microlocation"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Delete a microlocation given its id", 
        "tags": [
          "microlocations"
        ]
      }, 
      "get": {
        "operationId": "get_microlocation", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Microlocation"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Fetch a microlocation given its id", 
        "tags": [
          "microlocations"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "microlocation_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_microlocation", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/MicrolocationPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Microlocation"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a microlocation given its id", 
        "tags": [
          "microlocations"
        ]
      }
    }, 
    "/events/{event_id}/notifications": {
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_user_notifications", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/NotificationPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create user notification", 
        "tags": [
          "notifications"
        ]
      }
    }, 
    "/events/{event_id}/sessions": {
      "get": {
        "operationId": "get_session_list", 
        "parameters": [
          {
            "in": "query", 
            "name": "end_time_gt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "end_time_lt", 
            "type": "string"
          }, 
          {
            "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\"", 
            "in": "query", 
            "name": "order_by", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_lt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_gt", 
            "type": "string"
          }, 
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Session"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all sessions", 
        "tags": [
          "sessions"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_session_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SessionPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a session", 
        "tags": [
          "sessions"
        ]
      }
    }, 
    "/events/{event_id}/sessions/page": {
      "get": {
        "operationId": "get_session_list_paginated", 
        "parameters": [
          {
            "in": "query", 
            "name": "end_time_gt", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "end_time_lt", 
            "type": "string"
          }, 
          {
            "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\"", 
            "in": "query", 
            "name": "order_by", 
            "type": "string"
          }, 
          {
            "in": "query", 
            "name": "start_time_lt", 
            "type": "string"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "in": "query", 
            "name": "start_time_gt", 
            "type": "string"
          }, 
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SessionPaginated"
            }
          }
        }, 
        "summary": "List sessions in a paginated manner", 
        "tags": [
          "sessions"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/sessions/types": {
      "get": {
        "operationId": "get_session_type_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/SessionType"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all session types", 
        "tags": [
          "sessions"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_session_type_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SessionTypePost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SessionType"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a session type", 
        "tags": [
          "sessions"
        ]
      }
    }, 
    "/events/{event_id}/sessions/types/{type_id}": {
      "delete": {
        "operationId": "delete_session_type", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SessionType"
            }
          }
        }, 
        "summary": "Delete a session type given its id", 
        "tags": [
          "sessions"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "type_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_session_type", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SessionTypePost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SessionType"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a session type given its id", 
        "tags": [
          "sessions"
        ]
      }
    }, 
    "/events/{event_id}/sessions/{session_id}": {
      "delete": {
        "operationId": "delete_session", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Delete a session given its id", 
        "tags": [
          "sessions"
        ]
      }, 
      "get": {
        "operationId": "get_session", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Fetch a session given its id", 
        "tags": [
          "sessions"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "session_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_session", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SessionPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a session given its id", 
        "tags": [
          "sessions"
        ]
      }
    }, 
    "/events/{event_id}/speakers": {
      "get": {
        "operationId": "get_speaker_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Speaker"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all speakers", 
        "tags": [
          "speakers"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_speaker_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SpeakerPost"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Speaker"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a speaker", 
        "tags": [
          "speakers"
        ]
      }
    }, 
    "/events/{event_id}/speakers/page": {
      "get": {
        "operationId": "get_speaker_list_paginated", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SpeakerPaginated"
            }
          }
        }, 
        "summary": "List speakers in a paginated manner", 
        "tags": [
          "speakers"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/speakers/{speaker_id}": {
      "delete": {
        "operationId": "delete_speaker", 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Speaker"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Delete a speaker given its id", 
        "tags": [
          "speakers"
        ]
      }, 
      "get": {
        "operationId": "get_speaker", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Speaker"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Fetch a speaker given its id", 
        "tags": [
          "speakers"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "speaker_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_speaker", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SpeakerPost"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Speaker"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a speaker given its id", 
        "tags": [
          "speakers"
        ]
      }
    }, 
    "/events/{event_id}/sponsors": {
      "get": {
        "operationId": "get_sponsor_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Sponsor"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all sponsors", 
        "tags": [
          "sponsors"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_sponsor_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SponsorPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a sponsor", 
        "tags": [
          "sponsors"
        ]
      }
    }, 
    "/events/{event_id}/sponsors/page": {
      "get": {
        "operationId": "get_sponsor_list_paginated", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SponsorPaginated"
            }
          }
        }, 
        "summary": "List sponsors in a paginated manner", 
        "tags": [
          "sponsors"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/sponsors/types": {
      "get": {
        "operationId": "get_sponsor_types_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "type": "string"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all sponsor types", 
        "tags": [
          "sponsors"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/sponsors/{sponsor_id}": {
      "delete": {
        "operationId": "delete_sponsor", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Delete a sponsor given its id", 
        "tags": [
          "sponsors"
        ]
      }, 
      "get": {
        "operationId": "get_sponsor", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Fetch a sponsor given its id", 
        "tags": [
          "sponsors"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "sponsor_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_sponsor", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SponsorPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a sponsor given its id", 
        "tags": [
          "sponsors"
        ]
      }
    }, 
    "/events/{event_id}/tracks": {
      "get": {
        "operationId": "get_track_list", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Track"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all tracks", 
        "tags": [
          "tracks"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "post": {
        "operationId": "post_track_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/TrackPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Track"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Event does not exist", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Create a track", 
        "tags": [
          "tracks"
        ]
      }
    }, 
    "/events/{event_id}/tracks/page": {
      "get": {
        "operationId": "get_track_list_paginated", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TrackPaginated"
            }
          }
        }, 
        "summary": "List tracks in a paginated manner", 
        "tags": [
          "tracks"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }
      ]
    }, 
    "/events/{event_id}/tracks/{track_id}": {
      "delete": {
        "operationId": "delete_track", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Track"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Delete a track given its id", 
        "tags": [
          "tracks"
        ]
      }, 
      "get": {
        "operationId": "get_track", 
        "parameters": [
          {
            "description": "ETag saved by client for cached resource", 
            "in": "header", 
            "name": "If-None-Match", 
            "type": "string"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Track"
            }
          }, 
          "400": {
            "description": "Service does not belong to event", 
            "schema": {
              "$ref": "#/definitions/InvalidServiceError"
            }
          }, 
          "404": {
            "description": "Service not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Fetch a track given its id", 
        "tags": [
          "tracks"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "event_id", 
          "required": true, 
          "type": "integer"
        }, 
        {
          "in": "path", 
          "name": "track_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_track", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/TrackPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Track"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a track given its id", 
        "tags": [
          "tracks"
        ]
      }
    }, 
    "/login": {
      "post": {
        "operationId": "post_login", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }, 
          "401": {
            "description": "Authentication Failed"
          }
        }, 
        "tags": [
          "login"
        ]
      }
    }, 
    "/users": {
      "get": {
        "operationId": "get_user_list", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "List all users", 
        "tags": [
          "users"
        ]
      }, 
      "post": {
        "operationId": "post_user_list", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/UserPost"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }, 
          "201": {
            "description": "Resource created successfully"
          }, 
          "400": {
            "description": "Validation error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }, 
        "summary": "Create a user", 
        "tags": [
          "users"
        ]
      }
    }, 
    "/users/page": {
      "get": {
        "operationId": "get_user_list_paginated", 
        "parameters": [
          {
            "default": 1, 
            "description": "Serial number to start from", 
            "in": "query", 
            "name": "start", 
            "type": "integer"
          }, 
          {
            "default": 20, 
            "description": "Limit on the number of results", 
            "in": "query", 
            "name": "limit", 
            "type": "integer"
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UserPaginated"
            }
          }
        }, 
        "summary": "List users in a paginated manner", 
        "tags": [
          "users"
        ]
      }
    }, 
    "/users/{user_id}": {
      "delete": {
        "operationId": "delete_user", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }, 
          "404": {
            "description": "User not found"
          }
        }, 
        "summary": "Delete a user given its id", 
        "tags": [
          "users"
        ]
      }, 
      "get": {
        "operationId": "get_user", 
        "parameters": [
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }, 
          "404": {
            "description": "User not found"
          }
        }, 
        "summary": "Fetch a user given its id", 
        "tags": [
          "users"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "user_id", 
          "required": true, 
          "type": "integer"
        }
      ], 
      "put": {
        "operationId": "put_user", 
        "parameters": [
          {
            "in": "body", 
            "name": "payload", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/UserPut"
            }
          }, 
          {
            "description": "An optional fields mask", 
            "format": "mask", 
            "in": "header", 
            "name": "X-Fields", 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }, 
          "400": {
            "description": "Validation Error", 
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }, 
          "401": {
            "description": "Authentication failure", 
            "schema": {
              "$ref": "#/definitions/NotAuthorizedError"
            }
          }, 
          "404": {
            "description": "Object/Event not found", 
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }, 
        "summary": "Update a user given its id", 
        "tags": [
          "users"
        ]
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "responses": {
    "InvalidServiceError": {}, 
    "MaskError": {
      "description": "When any error occurs on mask"
    }, 
    "NotAuthorizedError": {}, 
    "NotFoundError": {}, 
    "ParseError": {
      "description": "When a mask can't be parsed"
    }, 
    "PermissionDeniedError": {}, 
    "ValidationError": {}
  }, 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Default namespace", 
      "name": "default"
    }, 
    {
      "description": "Events", 
      "name": "events"
    }, 
    {
      "description": "Sessions", 
      "name": "sessions"
    }, 
    {
      "description": "Tracks", 
      "name": "tracks"
    }, 
    {
      "description": "Speakers", 
      "name": "speakers"
    }, 
    {
      "description": "Sponsors", 
      "name": "sponsors"
    }, 
    {
      "description": "Microlocations", 
      "name": "microlocations"
    }, 
    {
      "description": "Login", 
      "name": "login"
    }, 
    {
      "description": "Exports", 
      "name": "exports"
    }, 
    {
      "description": "Imports", 
      "name": "imports"
    }, 
    {
      "description": "Users", 
      "name": "users"
    }, 
    {
      "description": "Extras", 
      "name": "extras"
    }, 
    {
      "description": "Notifications", 
      "name": "notifications"
    }, 
    {
      "description": "Error Responses", 
      "name": "errors"
    }
  ]
}