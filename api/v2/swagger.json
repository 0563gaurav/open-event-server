{"info": {"version": "2.0", "description": "Open Event Organizer APIs", "title": "Organizer Server APIs"}, "paths": {"/events": {"post": {"tags": ["events"], "operationId": "post_event_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Event"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/EventPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create an event"}, "get": {"tags": ["events"], "operationId": "get_event_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/EventComplete"}, "type": "array"}}}, "parameters": [{"type": "string", "name": "end_time_gt", "in": "query"}, {"type": "string", "name": "end_time_lt", "in": "query"}, {"type": "string", "name": "privacy", "in": "query"}, {"type": "string", "name": "start_time_lt", "in": "query"}, {"in": "query", "type": "string", "description": "Contains the string in name and description", "name": "contains"}, {"type": "string", "name": "topic", "in": "query"}, {"type": "string", "name": "state", "in": "query"}, {"type": "string", "name": "location", "in": "query"}, {"type": "string", "name": "sub_topic", "in": "query"}, {"type": "string", "name": "start_time_gt", "in": "query"}, {"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"type": "string", "name": "time_period", "in": "query"}, {"in": "query", "type": "string", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", "name": "include"}, {"type": "string", "name": "type", "in": "query"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all events"}}, "/events/page": {"get": {"tags": ["events"], "operationId": "get_event_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/EventPaginated"}}}, "parameters": [{"type": "string", "name": "end_time_gt", "in": "query"}, {"type": "string", "name": "end_time_lt", "in": "query"}, {"type": "string", "name": "privacy", "in": "query"}, {"type": "string", "name": "start_time_lt", "in": "query"}, {"in": "query", "type": "string", "description": "Contains the string in name and description", "name": "contains"}, {"type": "string", "name": "topic", "in": "query"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"type": "string", "name": "state", "in": "query"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"type": "string", "name": "location", "in": "query"}, {"type": "string", "name": "sub_topic", "in": "query"}, {"type": "string", "name": "start_time_gt", "in": "query"}, {"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"type": "string", "name": "time_period", "in": "query"}, {"in": "query", "type": "string", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", "name": "include"}, {"type": "string", "name": "type", "in": "query"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List events in a paginated manner"}}, "/events/{event_id}": {"put": {"tags": ["events"], "operationId": "put_event", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Event"}}, "400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/EventPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update an event given its id"}, "delete": {"tags": ["events"], "operationId": "delete_event", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Event"}}, "404": {"description": "Event not found"}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete an event given its id"}, "parameters": [{"required": true, "type": "integer", "description": null, "name": "event_id", "in": "path"}], "get": {"tags": ["events"], "operationId": "get_event", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/EventComplete"}}, "404": {"description": "Event not found"}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"in": "query", "type": "string", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)", "name": "include"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch an event given its id"}}, "/events/{event_id}/event": {"parameters": [{"required": true, "type": "integer", "description": null, "name": "event_id", "in": "path"}], "get": {"responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/EventComplete"}}, "404": {"description": "Event not found"}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "tags": ["events"], "description": "Alternate endpoint for fetching an event.", "summary": "Fetch an event given its id", "operationId": "get_event_webapp"}}, "/events/{event_id}/links": {"post": {"tags": ["events"], "operationId": "post_social_link_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SocialLink"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SocialLinkPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a social link"}, "parameters": [{"required": true, "type": "integer", "description": null, "name": "event_id", "in": "path"}], "get": {"tags": ["events"], "operationId": "get_social_link_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/SocialLink"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all social links"}}, "/events/{event_id}/links/{link_id}": {"put": {"tags": ["events"], "operationId": "put_social_link", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SocialLink"}}, "400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SocialLinkPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a social link given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "link_id", "in": "path"}], "delete": {"tags": ["events"], "operationId": "delete_social_link", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SocialLink"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a social link given its id"}}, "/events/{event_id}/microlocations": {"post": {"tags": ["microlocations"], "operationId": "post_microlocation_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Microlocation"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/MicrolocationPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a microlocation"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["microlocations"], "operationId": "get_microlocation_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Microlocation"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all microlocations"}}, "/events/{event_id}/microlocations/page": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["microlocations"], "operationId": "get_microlocation_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/MicrolocationPaginated"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List microlocations in a paginated manner"}}, "/events/{event_id}/microlocations/{microlocation_id}": {"put": {"tags": ["microlocations"], "operationId": "put_microlocation", "responses": {"400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Microlocation"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/MicrolocationPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a microlocation given its id"}, "delete": {"tags": ["microlocations"], "operationId": "delete_microlocation", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Microlocation"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a microlocation given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "microlocation_id", "in": "path"}], "get": {"tags": ["microlocations"], "operationId": "get_microlocation", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Microlocation"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch a microlocation given its id"}}, "/events/{event_id}/notifications": {"post": {"tags": ["notifications"], "operationId": "post_user_notifications", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Notification"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/NotificationPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create user notification"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}]}, "/events/{event_id}/sessions": {"post": {"tags": ["sessions"], "operationId": "post_session_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Session"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SessionPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a session"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sessions"], "operationId": "get_session_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Session"}, "type": "array"}}}, "parameters": [{"type": "string", "name": "end_time_gt", "in": "query"}, {"type": "string", "name": "end_time_lt", "in": "query"}, {"in": "query", "type": "string", "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\"", "name": "order_by"}, {"type": "string", "name": "start_time_lt", "in": "query"}, {"type": "string", "name": "start_time_gt", "in": "query"}, {"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all sessions"}}, "/events/{event_id}/sessions/page": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sessions"], "operationId": "get_session_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SessionPaginated"}}}, "parameters": [{"type": "string", "name": "end_time_gt", "in": "query"}, {"type": "string", "name": "end_time_lt", "in": "query"}, {"in": "query", "type": "string", "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\"", "name": "order_by"}, {"type": "string", "name": "start_time_lt", "in": "query"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"type": "string", "name": "start_time_gt", "in": "query"}, {"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List sessions in a paginated manner"}}, "/events/{event_id}/sessions/types": {"post": {"tags": ["sessions"], "operationId": "post_session_type_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SessionType"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SessionTypePost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a session type"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sessions"], "operationId": "get_session_type_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/SessionType"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all session types"}}, "/events/{event_id}/sessions/types/{type_id}": {"put": {"tags": ["sessions"], "operationId": "put_session_type", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SessionType"}}, "400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SessionTypePost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a session type given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "type_id", "in": "path"}], "delete": {"tags": ["sessions"], "operationId": "delete_session_type", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SessionType"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a session type given its id"}}, "/events/{event_id}/sessions/{session_id}": {"put": {"tags": ["sessions"], "operationId": "put_session", "responses": {"400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Session"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SessionPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a session given its id"}, "delete": {"tags": ["sessions"], "operationId": "delete_session", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Session"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a session given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "session_id", "in": "path"}], "get": {"tags": ["sessions"], "operationId": "get_session", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Session"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch a session given its id"}}, "/events/{event_id}/speakers": {"post": {"tags": ["speakers"], "operationId": "post_speaker_list", "responses": {"400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Speaker"}}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "201": {"description": "Resource created successfully"}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SpeakerPost"}}], "summary": "Create a speaker"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["speakers"], "operationId": "get_speaker_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Speaker"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}], "summary": "List all speakers"}}, "/events/{event_id}/speakers/page": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["speakers"], "operationId": "get_speaker_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SpeakerPaginated"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}], "summary": "List speakers in a paginated manner"}}, "/events/{event_id}/speakers/{speaker_id}": {"put": {"tags": ["speakers"], "operationId": "put_speaker", "responses": {"400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Speaker"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SpeakerPost"}}], "summary": "Update a speaker given its id"}, "delete": {"operationId": "delete_speaker", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Speaker"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "tags": ["speakers"], "summary": "Delete a speaker given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "speaker_id", "in": "path"}], "get": {"tags": ["speakers"], "operationId": "get_speaker", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Speaker"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}], "summary": "Fetch a speaker given its id"}}, "/events/{event_id}/sponsors": {"post": {"tags": ["sponsors"], "operationId": "post_sponsor_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Sponsor"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SponsorPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a sponsor"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sponsors"], "operationId": "get_sponsor_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Sponsor"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all sponsors"}}, "/events/{event_id}/sponsors/page": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sponsors"], "operationId": "get_sponsor_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/SponsorPaginated"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List sponsors in a paginated manner"}}, "/events/{event_id}/sponsors/types": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["sponsors"], "operationId": "get_sponsor_types_list", "responses": {"200": {"description": "Success", "schema": {"items": {"type": "string"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}], "summary": "List all sponsor types"}}, "/events/{event_id}/sponsors/{sponsor_id}": {"put": {"tags": ["sponsors"], "operationId": "put_sponsor", "responses": {"400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Sponsor"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/SponsorPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a sponsor given its id"}, "delete": {"tags": ["sponsors"], "operationId": "delete_sponsor", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Sponsor"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a sponsor given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "sponsor_id", "in": "path"}], "get": {"tags": ["sponsors"], "operationId": "get_sponsor", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Sponsor"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch a sponsor given its id"}}, "/events/{event_id}/tracks": {"post": {"tags": ["tracks"], "operationId": "post_track_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Track"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}, "404": {"description": "Event does not exist", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/TrackPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a track"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["tracks"], "operationId": "get_track_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Track"}, "type": "array"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all tracks"}}, "/events/{event_id}/tracks/page": {"parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}], "get": {"tags": ["tracks"], "operationId": "get_track_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TrackPaginated"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List tracks in a paginated manner"}}, "/events/{event_id}/tracks/{track_id}": {"put": {"tags": ["tracks"], "operationId": "put_track", "responses": {"400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Track"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/TrackPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a track given its id"}, "delete": {"tags": ["tracks"], "operationId": "delete_track", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Track"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a track given its id"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path"}, {"required": true, "type": "integer", "name": "track_id", "in": "path"}], "get": {"tags": ["tracks"], "operationId": "get_track", "responses": {"400": {"description": "Service does not belong to event", "schema": {"$ref": "#/definitions/InvalidServiceError"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Track"}}, "404": {"description": "Service not found", "schema": {"$ref": "#/definitions/NotFoundError"}}}, "parameters": [{"type": "string", "description": "ETag saved by client for cached resource", "name": "If-None-Match", "in": "header"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch a track given its id"}}, "/login": {"post": {"tags": ["login"], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Token"}}, "401": {"description": "Authentication Failed"}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/Login"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "operationId": "post_login"}}, "/users": {"post": {"tags": ["users"], "operationId": "post_user_list", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Validation error", "schema": {"$ref": "#/definitions/ValidationError"}}, "201": {"description": "Resource created successfully"}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/UserPost"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Create a user"}, "get": {"tags": ["users"], "operationId": "get_user_list", "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List all users"}}, "/users/page": {"get": {"tags": ["users"], "operationId": "get_user_list_paginated", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/UserPaginated"}}}, "parameters": [{"default": 1, "in": "query", "type": "integer", "description": "Serial number to start from", "name": "start"}, {"default": 20, "in": "query", "type": "integer", "description": "Limit on the number of results", "name": "limit"}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "List users in a paginated manner"}}, "/users/{user_id}": {"put": {"tags": ["users"], "operationId": "put_user", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "404": {"description": "Object/Event not found", "schema": {"$ref": "#/definitions/NotFoundError"}}, "401": {"description": "Authentication failure", "schema": {"$ref": "#/definitions/NotAuthorizedError"}}}, "parameters": [{"required": true, "in": "body", "name": "payload", "schema": {"$ref": "#/definitions/UserPut"}}, {"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Update a user given its id"}, "delete": {"tags": ["users"], "operationId": "delete_user", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}}, "404": {"description": "User not found"}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Delete a user given its id"}, "parameters": [{"required": true, "type": "integer", "name": "user_id", "in": "path"}], "get": {"tags": ["users"], "operationId": "get_user", "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}}, "404": {"description": "User not found"}}, "parameters": [{"description": "An optional fields mask", "format": "mask", "type": "string", "name": "X-Fields", "in": "header"}], "summary": "Fetch a user given its id"}}}, "responses": {"NotAuthorizedError": {}, "PermissionDeniedError": {}, "ValidationError": {}, "NotFoundError": {}, "ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}, "InvalidServiceError": {}}, "produces": ["application/json"], "basePath": "/api/v2", "tags": [{"name": "default", "description": "Default namespace"}, {"name": "events", "description": "Events"}, {"name": "sessions", "description": "Sessions"}, {"name": "tracks", "description": "Tracks"}, {"name": "speakers", "description": "Speakers"}, {"name": "sponsors", "description": "Sponsors"}, {"name": "microlocations", "description": "Microlocations"}, {"name": "login", "description": "Login"}, {"name": "exports", "description": "Exports"}, {"name": "imports", "description": "Imports"}, {"name": "users", "description": "Users"}, {"name": "extras", "description": "Extras"}, {"name": "notifications", "description": "Notifications"}, {"name": "errors", "description": "Error Responses"}], "host": "localhost", "definitions": {"SessionPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Session"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "Sponsor": {"required": ["id", "name"], "type": "object", "properties": {"description": {"type": "string"}, "level": {"type": "string"}, "url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sponsor_type": {"type": "string"}, "logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "MicrolocationPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Microlocation"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "SessionPost": {"required": ["end_time", "start_time", "title"], "type": "object", "properties": {"short_abstract": {"type": "string"}, "subtitle": {"type": "string"}, "language": {"type": "string", "example": "German"}, "title": {"type": "string"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "microlocation_id": {"type": "integer", "example": 0, "format": "int"}, "state": {"type": "string", "example": "pending"}, "comments": {"type": "string"}, "track_id": {"type": "integer", "example": 0, "format": "int"}, "slides": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "session_type_id": {"type": "integer", "example": 0, "format": "int"}, "video": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "speaker_ids": {"items": {"type": "integer", "example": 0, "format": "int"}, "type": "array"}, "audio": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "signup_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "long_abstract": {"type": "string"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}}}, "NotFoundError": {"type": "object", "properties": {"status": {"type": "string", "example": "NOT_FOUND"}, "field": {"type": "string"}, "message": {"type": "string"}, "code": {"type": "integer", "example": 404}}}, "EventCFS": {"type": "object", "properties": {"timezone": {"type": "string"}, "privacy": {"type": "string", "example": "public"}, "start_date": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "end_date": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "announcement": {"type": "string"}}}, "SpeakerPost": {"required": ["country", "email", "name", "organisation"], "type": "object", "properties": {"website": {"type": "string", "example": "http://website.com", "format": "uri"}, "short_biography": {"type": "string"}, "name": {"type": "string"}, "long_biography": {"type": "string"}, "mobile": {"type": "string"}, "photo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "twitter": {"type": "string"}, "linkedin": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "github": {"type": "string"}, "facebook": {"type": "string"}, "country": {"type": "string"}, "position": {"type": "string"}, "organisation": {"type": "string"}}}, "Microlocation": {"required": ["id", "name"], "type": "object", "properties": {"name": {"type": "string"}, "floor": {"type": "integer", "example": 0, "format": "int"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "id": {"type": "integer", "example": 0, "format": "int"}, "room": {"type": "string"}}}, "SessionType": {"required": ["id", "length", "name"], "type": "object", "properties": {"length": {"type": "number", "example": 0.0, "format": "float"}, "id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "InvalidServiceError": {"type": "object", "properties": {"status": {"type": "string", "example": "INVALID_SERVICE"}, "field": {"type": "string"}, "message": {"type": "string"}, "code": {"type": "integer", "example": 400}}}, "UserDetail": {"type": "object", "properties": {"firstname": {"type": "string"}, "lastname": {"type": "string"}, "twitter": {"type": "string"}, "contact": {"type": "string"}, "facebook": {"type": "string"}, "details": {"type": "string"}, "avatar": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}}}, "TrackPost": {"required": ["color", "name"], "type": "object", "properties": {"color": {"type": "string", "example": "green", "format": "color"}, "track_image_url": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "description": {"type": "string"}, "name": {"type": "string"}, "location": {"type": "string"}}}, "NotAuthorizedError": {"type": "object", "properties": {"status": {"type": "string", "example": "NOT_AUTHORIZED"}, "field": {"type": "string"}, "message": {"type": "string"}, "code": {"type": "integer", "example": 401}}}, "SessionMicrolocation": {"required": ["id"], "type": "object", "properties": {"id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "Track": {"required": ["color", "id", "name"], "type": "object", "properties": {"description": {"type": "string"}, "sessions": {"items": {"$ref": "#/definitions/TrackSession"}, "type": "array"}, "color": {"type": "string", "example": "green", "format": "color"}, "track_image_url": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "location": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "TrackPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Track"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "SocialLinkPost": {"required": ["link", "name"], "type": "object", "properties": {"link": {"type": "string"}, "name": {"type": "string"}}}, "SponsorPost": {"required": ["name"], "type": "object", "properties": {"description": {"type": "string"}, "level": {"type": "string"}, "url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sponsor_type": {"type": "string"}, "logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "name": {"type": "string"}}}, "SessionTypePost": {"required": ["length", "name"], "type": "object", "properties": {"length": {"type": "number", "example": 0.0, "format": "float"}, "name": {"type": "string"}}}, "Notification": {"required": ["email", "id"], "type": "object", "properties": {"title": {"type": "string"}, "email": {"type": "string"}, "received_at": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "action": {"type": "string"}, "message": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "UserPost": {"required": ["email", "password"], "type": "object", "properties": {"password": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "ValidationError": {"type": "object", "properties": {"status": {"type": "string", "example": "INVALID_FIELD"}, "field": {"type": "string"}, "message": {"type": "string"}, "code": {"type": "integer", "example": 400}}}, "UserPut": {"required": ["email"], "type": "object", "properties": {"user_detail": {"$ref": "#/definitions/UserDetail"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "NotificationPost": {"required": ["email"], "type": "object", "properties": {"received_at": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "action": {"type": "string"}, "message": {"type": "string"}, "email": {"type": "string"}, "title": {"type": "string"}}}, "EventPost": {"required": ["end_time", "name", "start_time"], "type": "object", "properties": {"event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "timezone": {"type": "string"}, "logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "searchable_location_name": {"type": "string"}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "location_name": {"type": "string"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "privacy": {"type": "string", "example": "public"}, "state": {"default": "Draft", "type": "string", "example": "Draft"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "organizer_description": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "description": {"type": "string"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "name": {"type": "string"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "sub_topic": {"type": "string", "example": "Air"}, "organizer_name": {"type": "string"}, "code_of_conduct": {"type": "string"}}}, "SessionSpeaker": {"required": ["id"], "type": "object", "properties": {"organisation": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "Token": {"type": "object", "properties": {"access_token": {"type": "string"}}}, "SocialLink": {"required": ["link", "name"], "type": "object", "properties": {"link": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "EventComplete": {"required": ["end_time", "id", "name", "start_time"], "type": "object", "properties": {"event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "creator": {"$ref": "#/definitions/EventCreator"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "microlocations": {"items": {"$ref": "#/definitions/Microlocation"}, "type": "array"}, "timezone": {"type": "string"}, "logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "searchable_location_name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "speakers": {"items": {"$ref": "#/definitions/Speaker"}, "type": "array"}, "location_name": {"type": "string"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "privacy": {"type": "string", "example": "public"}, "state": {"default": "Draft", "type": "string", "example": "Draft"}, "version": {"$ref": "#/definitions/EventVersion"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "organizer_description": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "description": {"type": "string"}, "sessions": {"items": {"$ref": "#/definitions/Session"}, "type": "array"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "sponsors": {"items": {"$ref": "#/definitions/Sponsor"}, "type": "array"}, "tracks": {"items": {"$ref": "#/definitions/Track"}, "type": "array"}, "name": {"type": "string"}, "social_links": {"items": {"$ref": "#/definitions/SocialLink"}, "type": "array"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "sub_topic": {"type": "string", "example": "Air"}, "organizer_name": {"type": "string"}, "code_of_conduct": {"type": "string"}}}, "EventCopyright": {"type": "object", "properties": {"licence_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "holder_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "licence": {"type": "string"}, "year": {"type": "integer", "example": 0, "format": "int"}, "logo": {"type": "string"}, "holder": {"type": "string"}}}, "Login": {"required": ["email", "password"], "type": "object", "properties": {"password": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "SessionTrack": {"required": ["id"], "type": "object", "properties": {"id": {"type": "integer", "example": 0, "format": "int"}, "name": {"type": "string"}}}, "EventVersion": {"type": "object", "properties": {"speakers_ver": {"type": "integer", "example": 0, "format": "int"}, "event_ver": {"type": "integer", "example": 0, "format": "int"}, "tracks_ver": {"type": "integer", "example": 0, "format": "int"}, "sessions_ver": {"type": "integer", "example": 0, "format": "int"}, "microlocations_ver": {"type": "integer", "example": 0, "format": "int"}, "sponsors_ver": {"type": "integer", "example": 0, "format": "int"}}}, "SpeakerSession": {"type": "object", "properties": {"id": {"type": "integer", "example": 0, "format": "int"}, "title": {"type": "string"}}}, "UserPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/User"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "SpeakerPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Speaker"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "EventCreator": {"type": "object", "properties": {"id": {"type": "integer", "example": 0, "format": "int"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "SponsorPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Sponsor"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "User": {"required": ["email"], "type": "object", "properties": {"last_access_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "signup_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "user_detail": {"$ref": "#/definitions/UserDetail"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "Session": {"required": ["end_time", "id", "start_time", "title"], "type": "object", "properties": {"short_abstract": {"type": "string"}, "speakers": {"items": {"$ref": "#/definitions/SessionSpeaker"}, "type": "array"}, "subtitle": {"type": "string"}, "language": {"type": "string", "example": "German"}, "session_type": {"$ref": "#/definitions/SessionType"}, "track": {"$ref": "#/definitions/SessionTrack"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "title": {"type": "string"}, "comments": {"type": "string"}, "slides": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "state": {"type": "string", "example": "pending"}, "video": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "microlocation": {"$ref": "#/definitions/SessionMicrolocation"}, "audio": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "signup_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "id": {"type": "integer", "example": 0, "format": "int"}, "long_abstract": {"type": "string"}}}, "TrackSession": {"required": ["id"], "type": "object", "properties": {"id": {"type": "integer", "example": 0, "format": "int"}, "title": {"type": "string"}}}, "Speaker": {"required": ["country", "email", "id", "name", "organisation"], "type": "object", "properties": {"website": {"type": "string", "example": "http://website.com", "format": "uri"}, "short_biography": {"type": "string"}, "name": {"type": "string"}, "long_biography": {"type": "string"}, "sessions": {"items": {"$ref": "#/definitions/SpeakerSession"}, "type": "array"}, "mobile": {"type": "string"}, "photo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "twitter": {"type": "string"}, "linkedin": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "github": {"type": "string"}, "facebook": {"type": "string"}, "organisation": {"type": "string"}, "country": {"type": "string"}, "position": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "EventPaginated": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"items": {"$ref": "#/definitions/Event"}, "type": "array"}, "next": {"type": "string"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "previous": {"type": "string"}}}, "Event": {"required": ["end_time", "id", "name", "start_time"], "type": "object", "properties": {"event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "creator": {"$ref": "#/definitions/EventCreator"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "timezone": {"type": "string"}, "logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "searchable_location_name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "location_name": {"type": "string"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "privacy": {"type": "string", "example": "public"}, "state": {"default": "Draft", "type": "string", "example": "Draft"}, "version": {"$ref": "#/definitions/EventVersion"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "organizer_description": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "description": {"type": "string"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "name": {"type": "string"}, "social_links": {"items": {"$ref": "#/definitions/SocialLink"}, "type": "array"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "sub_topic": {"type": "string", "example": "Air"}, "organizer_name": {"type": "string"}, "code_of_conduct": {"type": "string"}}}, "MicrolocationPost": {"required": ["name"], "type": "object", "properties": {"latitude": {"type": "number", "example": 0.0, "format": "float"}, "room": {"type": "string"}, "name": {"type": "string"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "floor": {"type": "integer", "example": 0, "format": "int"}}}}, "swagger": "2.0", "consumes": ["application/json"]}
